# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: sudo apt update && sudo apt-get install -y build-essential cpio nasm cmake xorriso grub-pc-bin grub-common gcc-multilib g++-multilib

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_ASM_NASM_COMPILER=nasm -DCMAKE_ASM_NASM_FLAGS="-f elf32"

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        sudo bash tools/create_disk.sh ./rootfs/binary ${{github.workspace}}/build/test.img

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4.6.2
      with:
        name: build-artifacts
        path: |
          build/kernel.iso
          build/test.img
        if-no-files-found: warn
        compression-level: 6
        overwrite: false
        include-hidden-files: false

    -name: Release
      uses: googleapis/release-please-action@v3.1.2
      with:
        # GitHub token for creating and grooming release PRs, defaults to using secrets.GITHUB_TOKEN
        token: # optional, default is ${{ github.token }}
        # should the PR be proposed from a fork, Default to false
        fork: # optional
        # Should stale release PRs be closed post release? Defaults to true
        clean: # optional, default is true
        # name of the distributions releases are being created for, e.g., "name" in package.json, or "setup.py"
        package-name: # optional
        # what type of release is this, one of (ruby, python, node, terraform-module)
        release-type: simple 
        # should breaking changes before 1.0.0 produce minor bumps
        bump-minor-pre-major: # optional
        # should feat changes before 1.0.0 produce patch bumps instead of minor bumps
        bump-patch-for-minor-pre-major: # optional
        # create a release from a path other than the repository's root
        path: # optional, default is 
        # specify a CHANGELOG path other than the root CHANGELOG.md
        changelog-path: # optional, default is 
        # release-please command to run, either "github-release", or "release-pr" (defaults to running both)
        command: # optional, default is 
        # provide a path to a version file to increment (used by ruby releaser)
        version-file: # optional, default is 
        # extra files to bump using the generic updater
        extra-files: # optional, default is 
        # branch to open pull release PR against (detected by default)
        default-branch: # optional, default is 
        # changlelog commit types
        changelog-types: # optional, default is 
        # where can the config file be found in the project?
        config-file: # optional, default is 
        # where can the manifest file be found in the project?
        manifest-file: # optional, default is 
        # Add [`Signed-off-by`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) line at the end of the commit log message using the user and email provided. (format "Name \<email@example.com\>")
        signoff: # optional, default is 
        # configure github API URL. Default `https://api.github.com`
        github-api-url: # optional, default is 
        # configure github GraphQL URL. Default `https://api.github.com`
        github-graphql-url: # optional, default is 
        # configure github repository URL. Default `process.env.GITHUB_REPOSITORY`
        repo-url: # optional, default is 
        # add prefix to tags and branches, allowing multiple libraries to be released from the same repository
        monorepo-tags: # optional
        # add title pattern to make release PR, defaults to using "chore${scope}: release${component} ${version}"
        pull-request-title-pattern: # optional, default is 
        # mark release as a draft
        draft: # optional
        # mark pull request as a draft
        draft-pull-request: # optional
          

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

