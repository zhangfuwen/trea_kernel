# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: sudo apt update && sudo apt-get install -y build-essential cpio nasm cmake xorriso grub-pc-bin grub-common gcc-multilib g++-multilib

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_ASM_NASM_COMPILER=nasm -DCMAKE_ASM_NASM_FLAGS="-f elf32"

    - name: Build
      # Build your program with the given configuration
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
        sudo bash tools/create_disk.sh ./rootfs/binary ${{github.workspace}}/build/test.img
        file build/test.img
        file build/kernel.iso

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4.6.2
      with:
        name: build-artifacts
        path: |
          ${{github.workspace}}/build/kernel.iso
          ${{github.workspace}}/build/test.img
        if-no-files-found: error
        compression-level: 6
        overwrite: true
        include-hidden-files: false

    # - name: Release
    #   uses: googleapis/release-please-action@v3.1.2
    #   with:
    #     # GitHub token for creating and grooming release PRs, defaults to using secrets.GITHUB_TOKEN
    #     token: ${{ github.token }}
    #     # what type of release is this, one of (ruby, python, node, terraform-module)
    #     release-type: simple
    #     # Should stale release PRs be closed post release? Defaults to true
    #     clean: true
          

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

